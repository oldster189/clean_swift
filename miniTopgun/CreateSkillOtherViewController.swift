//
//  CreateSkillOtherViewController.swift
//  miniTopgun
//
//  Created by itthipon wiwatthanasathit on 7/30/2560 BE.
//  Copyright (c) 2560 Izpal. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateSkillOtherDisplayLogic: class
{
    func displayLevelSkill(viewModel: CreateSkillOther.MDLevelSkill.ViewModel)
    func displayCreateSkillOther(viewModel: CreateSkillOther.Create.ViewModel)
    func displayUpdateSkillOther(viewModel: CreateSkillOther.Update.ViewModel)
    func displaySkillOtherToEdit(viewModel: CreateSkillOther.Edit.ViewModel)
}

class CreateSkillOtherViewController: UIViewController, CreateSkillOtherDisplayLogic
{
    var interactor: CreateSkillOtherBusinessLogic?
    var router: (NSObjectProtocol & CreateSkillOtherRoutingLogic & CreateSkillOtherDataPassing)?
    
    @IBOutlet weak var mTitleLabel: UILabel!
    @IBOutlet weak var mNameSkillTextField: UITextField!
    @IBOutlet weak var mLevelSkillTextField: UITextField!
    @IBOutlet weak var mPickerView: UIPickerView!
    @IBOutlet weak var mLoadingView: UIView!
    @IBOutlet weak var mLevelSkillView: UIView!
    @IBOutlet var mLevelSkillGesture: UITapGestureRecognizer!
    @IBOutlet weak var mSelectView: UIView!
    
    var mLevelSkillSend = ""
    
    var mLevelSkillList:[LevelSkillData]?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CreateSkillOtherInteractor()
        let presenter = CreateSkillOtherPresenter()
        let router = CreateSkillOtherRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    
    // MARK: View lifecycle
    
    
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        mLoadingView.isHidden = false
        fetchLevelSkill()
        showSkillToEdit()
    }
   
    // MARK: Do something
 
    
    @IBAction func saveSkillOther(_ sender: Any) {
        
        mLoadingView.isHidden = false
        let nameSkill = mNameSkillTextField.text!
        let levelSkill = mLevelSkillSend
        if let skillOtherEdit = interactor?.skillOtherEditDict {
            let idSkill = skillOtherEdit.iD!
            let request = CreateSkillOther.Update.Request(bodyRequest: CreateSkillOther.BodyRequest(idJsk: "114459", idResume: "0", idSkill: idSkill, nameSkill: nameSkill, levelSkill: levelSkill))
            interactor?.updateSkillOther(request: request)
        }else{
            let request = CreateSkillOther.Create.Request(bodyRequest: CreateSkillOther.BodyRequest(idJsk: "114459", idResume: "0", idSkill: "", nameSkill: nameSkill, levelSkill: levelSkill))
            interactor?.createSkillOther(request: request)
        }
        
    }
    
    func displayCreateSkillOther(viewModel: CreateSkillOther.Create.ViewModel){
        mLoadingView.isHidden = true
        router?.routeToListSkillOther()
    }
    
    func displayUpdateSkillOther(viewModel: CreateSkillOther.Update.ViewModel){
        mLoadingView.isHidden = true
        router?.routeToListSkillOther()
    }
    
    func showSkillToEdit(){
        let request = CreateSkillOther.Edit.Request()
        interactor?.showSkillOtherToEdit(request: request)
    }
    
    func displaySkillOtherToEdit(viewModel: CreateSkillOther.Edit.ViewModel){
        let dict = viewModel.SkillOtherList
        mNameSkillTextField.text = dict.sKILLNAME
        mLevelSkillTextField.text = dict.sKILLLEVELEN
    }
    
    func fetchLevelSkill()
    {
        let request = CreateSkillOther.MDLevelSkill.Request()
        interactor?.fetchLevelSkill(requst: request)
    }
    
    func displayLevelSkill(viewModel: CreateSkillOther.MDLevelSkill.ViewModel)
    {
        mLevelSkillList = viewModel.LevelSkillList
        mPickerView.reloadAllComponents()
        mLoadingView.isHidden = true
    }
    
    @IBAction func onSpinerClick(_ sender: Any) {  
        showPickerView()
        selectPickerViewCurrentName()
    }
    
    
    func selectPickerViewCurrentName() {
        
        if let index = self.mLevelSkillList?.index(where: { $0.iDLEVEL   == mLevelSkillSend }){
            mPickerView.selectRow(index, inComponent: 0, animated: false)
        }else{
            mPickerView.selectRow(0, inComponent: 0, animated: false)
        }
        mPickerView.reloadAllComponents()
    }
     
    @IBAction func onDone(_ sender: Any) {
        var select:Int!
        select = mPickerView.selectedRow(inComponent: 0)
        if let list = mLevelSkillList {
            mLevelSkillSend = list[select].iDLEVEL!
            mLevelSkillTextField.text = list[select].nAME
        }
        hidePickerView()
    }
    
    @IBAction func onCancel(_ sender: Any) {
        hidePickerView()
    }
    
    func showPickerView(){
        UIView.animate(withDuration: 0.3, delay: 0.0, options: UIViewAnimationOptions.curveEaseOut, animations: {
            self.mSelectView.alpha = 1
        }, completion: nil)
        self.perform(#selector(self.hideKeyboard), with: nil, afterDelay: 0)
    }
    
    func hidePickerView(){
        UIView.animate(withDuration: 0.3, delay: 0.0, options: UIViewAnimationOptions.curveEaseOut, animations: {
            self.mSelectView.alpha = 0
        }, completion: nil)
    }
    
    func hideKeyboard() {
        view.endEditing(true)
    }
}

extension CreateSkillOtherViewController:UIPickerViewDataSource {
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        guard let list = mLevelSkillList else {
            return 0
        }
        return list.count
    }
}

extension CreateSkillOtherViewController:UIPickerViewDelegate {
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        let item = mLevelSkillList![row]
        return item.nAME
    }
}
